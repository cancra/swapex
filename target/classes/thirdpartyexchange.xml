<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <flow name="thirdpartyexchangeFlow" processingStrategy="synchronous">
        <jms:inbound-endpoint doc:name="JMS" connector-ref="Active_MQ_Consumer" queue="ThirdPartyOrderQueue"/>
        <logger message="Consumer Logger --------------&gt;&gt;&gt;  #[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="JMSOriginalOrder" value="#[['quantity': payload.quantity, 'price': payload.price, 'coinname': payload.coinname, 'userid': payload.userid , 'transactionID': payload.transactionID]]" doc:name="Variable"/>
        <flow-ref name="thirdpartyexchangeSelectorSub_Flow" doc:name="thirdpartyexchangeSelectorSub_Flow"/>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
        <logger message="Before choice------------- #[payload]------------ #[message.inboundProperties.'http.status']" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties['http.status'] == '200']">
                <logger message="Sucessful Logger-----------#[payload] with HTTP Code #[message.inboundProperties.'http.status']" level="INFO" doc:name="Sucessful Logger"/>
                <logger message="#[flowVars.JMSOriginalOrder.quantity]------------ transactionhash---#[payload.transactionhash]" level="INFO" doc:name="Logger"/>
                <set-payload value="#[['quantity': flowVars.JMSOriginalOrder.quantity, 'coinname': flowVars.JMSOriginalOrder.coinname, 'userid': flowVars.JMSOriginalOrder.userid , 'transactionid': flowVars.JMSOriginalOrder.transactionID, 'thirdpartytransactionid': payload.thirdpartytransactionid, 'success': payload.success,'thirdpartytransactionhash': payload.transactionhash ]]" doc:name="Set Payload"/>
                <logger message="#[payload]" level="INFO" doc:name="Logger"/>
                <jms:outbound-endpoint queue="SucessQueue" connector-ref="Active_MQ_Sucess" doc:name="JMS: Sucess Queue Producer"/>
            </when>
            <when expression="#[message.inboundProperties['http.status'] == '400']">
                <logger message="Auth Failed Logger-----------#[payload] with HTTP Code----------------&gt;&gt; #[message.inboundProperties.'http.status']" level="INFO" doc:name="Auth Failed Queue Logger"/>
            </when>
            <otherwise>
                <logger message="Default Scope Logger" level="INFO" doc:name="Default Logger"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
			<logger
				message="-----------------&gt;&gt;&gt; Adding Message #[payload] to Failed Queue"
				level="INFO" doc:name="Logger" />
			<object-to-string-transformer doc:name="Object to String" />
			<jms:outbound-endpoint queue="Failed Queue"
				connector-ref="Active_MQ_Failed" doc:name="JMS: Failed Queue Producer" />
		</catch-exception-strategy>
    </flow>
    <sub-flow name="thirdpartyexchangeSelectorSub_Flow">
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.buyexchange == 'CoinMarketCap']">
                <until-successful maxRetries="4" failureExpression="#[message.inboundProperties.'http.status'=='500']" synchronous="true" doc:name="Until Successful: CoinMarket Cap">
                    <http:request config-ref="HTTP_Request_Configuration_mockingservice" path="/exchange" method="POST" doc:name="HTTP: Mocking Service">
                        <http:success-status-code-validator values="200..599"/>
                    </http:request>
                </until-successful>
            </when>
            <when expression="#[message.inboundProperties.buyexchange == 'ACX']">
                <until-successful maxRetries="4" failureExpression="#[message.inboundProperties.'http.status'=='500']" synchronous="true" doc:name="Until Successful: ACX">
                    <http:request config-ref="HTTP_Request_Configuration_mockingservice" path="/exchange" method="POST" doc:name="HTTP: Mocking Service">
                        <http:success-status-code-validator values="200..599"/>
                    </http:request>
                </until-successful>
            </when>
            <when expression="#[message.inboundProperties.buyexchange == 'Bittrex']">
                <until-successful maxRetries="4" failureExpression="#[message.inboundProperties.'http.status'=='500']" synchronous="true" doc:name="Until Successful: Bittrex">
                    <http:request config-ref="HTTP_Request_Configuration_mockingservice" path="/exchange" method="POST" doc:name="HTTP: Mocking Service">
                        <http:success-status-code-validator values="200..599"/>
                    </http:request>
                </until-successful>
            </when>
            <otherwise>
                <logger message="No Matching Exchange Found" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="MockingExchangeFlow">
        <http:listener config-ref="HTTP_Listener_ConfigurationMockingExchange" path="exchange" allowedMethods="POST" doc:name="HTTP"/>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
        <set-variable variableName="mockpayload" value="#[payload.userid]" doc:name="Variable"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-payload value="{&quot;thirdpartytransactionid&quot; : &quot;#[java.util.UUID.randomUUID()]&quot; , &quot;success&quot;: &quot;True&quot;, &quot;transactionhash&quot;: &quot;#[com.google.common.hash.Hashing.sha256().hashBytes(flowVars['mockpayload'].getBytes(&quot;UTF-8&quot;))]&quot;}" doc:name="Set Payload"/>
        <logger message="Exchange logger ------------------- &gt;&gt;&gt; #[payload] Consumed By Exchange" level="INFO" doc:name="Logger"/>
        <message-properties-transformer doc:name="Message Properties">
            <add-message-property key="http.status" value="200"/>
        </message-properties-transformer>
        
    </flow>
    <flow name="transactionalqueueFlow">
        <jms:inbound-endpoint queue="SucessQueue" connector-ref="Active_MQ_Consumer" doc:name="JMS: "/>
        <logger message="#[payload.quantity]--------#[payload.coinname]-------#[payload.userid]-----------#[payload.transactionid]---------- #[payload.thirdpartytransactionid]------------#[payload.success]------#[payload.thirdpartytransactionhash]" level="INFO" doc:name="Logger"/>
        <db:bulk-execute config-ref="Oracle_Configuration" doc:name="Database"><![CDATA[INSERT INTO THIRDPARTYORDERBOOK  (QUANTITY, COINNAME, USERID, ORIGINALTRANSACTIONID, THIRDPARTYTRANSACTIONID, TRANSACTIONHASH, SUCCESS) VALUES  (#[payload.quantity], '#[payload.coinname]','#[payload.userid]','#[payload.transactionid]','#[payload.thirdpartytransactionid]','#[payload.thirdpartytransactionhash]','#[payload.success]')]]></db:bulk-execute>
        <logger message="#[payload] &lt;&lt;&lt;-------------------- Transaction Completed Successfully---------------------&gt;&gt;&gt;&gt;" level="INFO" doc:name="Logger"/>
    </flow>
    
</mule>
